openapi: "3.0.0"

info:
  title: Blog API
  version: "1.0.0"
  
paths:
  /users:
    post:
      summary: Creates a user.
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            example:
              data:
                type: "user"
                attributes:
                  username: user01
                  password: superstrongpassword
                  full_name: "super long name"
                  
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errors:
                  - status: "400"
                    title: Bad request
                    detail: "missing parameter in request"

  /posts:
    get:
      summary: Gets a list of all posts
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/PostItems'
        '404':
          description: Not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/404List'
      
              
    post:
      summary: Creates a new blog post
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/PostItem'
            example:
              data:
                type: "post"
                attributes:
                  title: quite the title
                  text: and some text
            
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SinglePostResponse'
        '401':
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid input
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errors:
                  - status: "400"
                    title: Bad request
                    detail: "missing parameter in request"
      
  /posts/{postId}:
    get:
      summary: Returns a single post by ID
      parameters:
        - $ref: '#/components/parameters/PostId'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SinglePostResponse'
        '404':
          description: Not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/404'
          
    patch:
      summary: Updates an existing post
      security:
        - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/PostId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostItem'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SinglePostResponse'
        '404':
          description: Not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/404'
        '400':
          description: Invalid input
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errors:
                  - status: "400"
                    title: Bad request
                    detail: "missing parameter in request"
        '401':
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          
    delete:
      summary: Deletes an existing post
      security:
        - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/PostId'
      responses:
        '204':
          description: Deleted
        '404':
          description: Not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/404'
        '401':
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          
  /posts/{postId}/comments:
    get:
      summary: Get a list of comments associated with a single post
      parameters:
        - $ref: '#/components/parameters/PostId'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/CommentItems'
        '404':
          description: Not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/404List'
    post:
      summary: Post a comment to a post
      security:
        - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/PostId'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      example: comment
                    attributes:
                      type: object
                      properties:
                        body:
                          type: string
                          example: first comment
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SingleCommentResponse'
        '401':
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          
  /posts/{postId}/comments/{commentId}:
    get:
      summary: Get a comment by ID
      parameters:
        - $ref: '#/components/parameters/PostId'
        - $ref: '#/components/parameters/CommentId'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SingleCommentResponse'
              
        '404':
          description: Not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/404'
    delete:
      summary: Delete comment by ID
      security:
        - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/PostId'
        - $ref: '#/components/parameters/CommentId'
      responses:
        '204':
          description: Deleted
        '404':
          description: Not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/404'
        '401':
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      
  schemas:
    Post:
      type: object
      properties:
        title:
          type: string
        text:
          type: string
        id:
          type: integer
        author_id:
          type: integer
      required:
        - title
        - text
    
    PostItems:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PostItem'
            
    PostItem:
      type: object
      properties:
        type:
          type: string
          example: post
        id:
          type: string
          example: "1"
        attributes:
          type: object
          properties:
            title:
              type: string
              example: "First post"
            text:
              type: string
              example: with some text
            author_id:
              type: string
              example: "2003"
              
    SinglePostResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PostItem'
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
          format: password
        full_name:
          type: string
      required:
        - username
        - password
        - full_name
          
    Comment:
      type: object
      properties:
        id:
          type: integer
        commenter:
          type: string
        body:
          type: string
        post_id:
          type: integer
          
    CommentItem:
      type: object
      properties:
        type:
          type: string
          example: comment
        id:
          type: string
          example: "1"
        attributes:
          type: object
          properties:
            commenter:
              type: string
              example: first user
            body:
              type: string
              example: first comment
            post_id:
              type: string
              example: "1"
              
    SingleCommentResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CommentItem'
    CommentItems:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CommentItem'
            
          
    UserResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            "type":
              type: string
            id:
              type: string
            attributes:
              type: object
              properties:
                username:
                  type: string
                full_name:
                  type: string
                  
    UserRequest:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
            attributes:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                full_name:
                  type: string
              required:
                - username
                - password
                - full_name
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    
    Error:
      type: object
      properties:
        status:
          type: string
          description: HTTP status code
          example: 401
        title:
          type: string
          description: short error message
          example: Unauthorized
        detail:
          type: string
          description: extended information about the error
          example: Authentication required
          
    "404":
      type: object
      properties:
        data:
          type: string
          example: null
            
    404List:
      type: object
      properties:
        data:
          type: array
          example: []
          items:
            type: object

  parameters:
    PostId:
      name: postId
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
    
    CommentId:
      name: commentId
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
        
  examples:
    BadRequest:
      value:
        errors:
          status: "400"
          title: Bad request
          detail: "missing parameter in request"